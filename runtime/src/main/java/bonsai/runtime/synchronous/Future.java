// Copyright 2017 Pierre Talbot (IRCAM)

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bonsai.runtime.synchronous;

import java.util.*;
import java.util.stream.Collectors;
import bonsai.runtime.core.*;
import bonsai.runtime.synchronous.variables.*;
import bonsai.runtime.synchronous.interfaces.*;
import bonsai.runtime.synchronous.statements.SpaceStmt;

public class Future
{
  private Program branch;
  /// `snapshotST` stores all the single time variables captured in a `space` statement.
  /// These variables are shared among all the `space` statements.
  /// Note that the branch must have access to these variables only in READ-ONLY.
  private HashMap<String, SingleTimeVar> snapshotST;
  /// Snapshot of the labels of the world line variables.
  /// This snapshot is shared between all the children nodes, and therefore, the `restore` method of must fulfil the `Shared label property`.
  /// This property ensures that a label can be restored an arbitrary number of time and is not modified.
  private HashMap<String, Object> snapshotWL;

  public Future(Program branch, HashMap<String, SingleTimeVar> snapshotST,
   HashMap<String, Object> snapshotWL)
  {
    this.branch = branch;
    this.snapshotST = snapshotST;
    this.snapshotWL = snapshotWL;
  }

  public Program branch() {
    return branch;
  }

  // // Restore the world line variables present in `varsWL` according to their labels in `snapshotWL`.
  // public void restoreWL(HashMap<String, StreamVar> varsWL) {
  //   for(Map.Entry<String, StreamVar> entry : varsWL.entrySet()) {
  //     Object label = snapshotWL.get(entry.getKey());
  //     entry.getValue().stream().restore(label);
  //   }
  // }

  // public void swapVarsST(Environment env) {
  //   snapshotST = env.swapVarsST(snapshotST);
  // }

  // /// For each branch generated by a `space` statement, we create a future.
  // public static ArrayList<Future> createFutures(ArrayList<SpaceStmt> branches,
  //   HashMap<String, SingleTimeVar> varsST, HashMap<String, StreamVar> varsWL)
  // {
  //   HashMap<String, Object> snapshotWL = snapshotWL(varsWL);
  //   ArrayList<Future> store = new ArrayList();
  //   for(SpaceStmt b : branches) {
  //     store.add(new Future(b, snapshotST(b, varsST), snapshotWL));
  //   }
  //   return store;
  // }

  // // We create a snapshot of the world line variables by calling `label` on each of these variables.
  // // The labels are stored in the `HashMap` that is returned.
  // private static HashMap<String, Object> snapshotWL(HashMap<String, StreamVar> varsWL) {
  //   HashMap<String, Object> snapshotWL = new HashMap();
  //   for (StreamVar var : varsWL.values()) {
  //     snapshotWL.put(var.uid(), var.stream().label());
  //   }
  //   return snapshotWL;
  // }

  // // We capture the single time variables of a branch, and store them into a `HashMap` that is returned.
  // // Note that we do not store a copy of the variable, but a reference (see @snapshotST).
  // private static HashMap<String, SingleTimeVar> snapshotST(SpaceStmt branch,
  //   HashMap<String, SingleTimeVar> varsST)
  // {
  //   HashMap<String, SingleTimeVar> snapshotST = new HashMap();
  //   for (String varUID: branch.singleTimeClosure()) {
  //     snapshotST.put(varUID, varsST.get(varUID));
  //   }
  //   return snapshotST;
  // }
}
